name: Test Build (PR)

on:
    pull_request:
        branches:
            - master
            - main
    workflow_dispatch: # Allow manual trigger

jobs:
    test-build:
        runs-on: windows-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: Setup Python for node-gyp
              uses: actions/setup-python@v5
              with:
                  python-version: '3.11'

            - name: Setup MSBuild (Windows)
              uses: microsoft/setup-msbuild@v2

            - name: Cache Electron and node-gyp
              uses: actions/cache@v4
              with:
                  path: |
                      ${{ runner.temp }}\electron-cache
                      ${{ runner.temp }}\node-gyp
                      ~\AppData\Local\electron\Cache
                      ~\AppData\Local\node-gyp\Cache
                  key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-electron-

            - name: Install dependencies with retries
              run: |
                  $maxRetries = 3
                  $retryCount = 0
                  $success = $false

                  while (-not $success -and $retryCount -lt $maxRetries) {
                      try {
                          npm ci
                          $success = $true
                          Write-Host "✓ Dependencies installed successfully"
                      } catch {
                          $retryCount++
                          if ($retryCount -lt $maxRetries) {
                              Write-Host "Install failed, retrying ($retryCount/$maxRetries)..."
                              Start-Sleep -Seconds 5
                          } else {
                              Write-Host "Failed to install dependencies after $maxRetries attempts"
                              throw
                          }
                      }
                  }
              shell: pwsh
              env:
                  npm_config_build_from_source: true
                  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}\.cache\electron-builder
                  ELECTRON_CACHE: ${{ runner.temp }}\electron-cache
                  npm_config_cache: ${{ runner.temp }}\npm-cache
                  GYP_MSVS_VERSION: 2022

            - name: Test build
              run: npm run build
              env:
                  npm_config_build_from_source: true
                  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}\.cache\electron-builder
                  ELECTRON_CACHE: ${{ runner.temp }}\electron-cache
                  GYP_MSVS_VERSION: 2022
              continue-on-error: false

            - name: Verify build output
              run: |
                  if (Test-Path "dist") {
                      Write-Host "✓ Build directory exists"
                      $zipFiles = Get-ChildItem -Path "dist" -Filter "*.zip"
                      if ($zipFiles.Count -gt 0) {
                          Write-Host "✓ Found ZIP file(s):"
                          $zipFiles | ForEach-Object { Write-Host "  - $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)" }
                      } else {
                          Write-Host "✗ No ZIP files found in dist directory"
                          exit 1
                      }
                  } else {
                      Write-Host "✗ Build directory not found"
                      exit 1
                  }
              shell: pwsh

            - name: Upload build artifact (for inspection)
              uses: actions/upload-artifact@v4
              with:
                  name: test-build-${{ github.event.pull_request.number || github.run_number }}
                  path: dist/*.zip
                  retention-days: 7
                  if-no-files-found: error

            - name: Build Summary
              run: |
                  Write-Host ""
                  Write-Host "========================================" -ForegroundColor Green
                  Write-Host "✓ Build completed successfully!" -ForegroundColor Green
                  Write-Host "========================================" -ForegroundColor Green
                  Write-Host ""
                  Write-Host "Build artifacts have been uploaded and can be downloaded from the Actions tab."
                  Write-Host "They will be retained for 7 days."
              shell: pwsh
