name: Build and Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0, v2.0.1, etc.

permissions:
  contents: write # Needed to create the release

jobs:
  test-build:
    # Your build script targets win32, so we must use a Windows runner.
    runs-on: windows-latest 
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for release notes generation
          fetch-depth: 0

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your required Node.js version

      - name: 📦 Install Dependencies
        # Using npm ci is generally faster and more reliable on CI
        run: npm ci

      - name: ⚙️ Install 7-Zip (Optional but recommended)
        # This step installs 7-Zip, which your script prefers for compression.
        # It's a standard tool on Windows images, but this ensures it.
        run: choco install 7zip.install -y

      - name: 🏗️ Run Build Script
        # Executes your build.js file which handles:
        # 1. Electron packaging via @electron/packager
        # 2. Zipping the built application using 7z or PowerShell
        run: node build.js

      - name: 🏷️ Get Tag Name
        id: get_tag
        # Extracts the tag name (e.g., v1.0.0)
        run: echo "TAG_NAME=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        shell: powershell

      - name: 📝 Generate Release Notes
        id: release_notes
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          # Look for changes between the current tag and the previous one
          toTag: ${{ steps.get_tag.outputs.TAG_NAME }}
          configuration: |
            {
              "template": "## Changes\n\n{{CHANGELOG}}",
              "pr_template": "- {{TITLE}} ([#{{NUMBER}}]({{URL}}))",
              "empty_template": "No significant changes."
            }
          # Fetching the last release tag to compare against
          fromTag: ${{ steps.get_tag.outputs.TAG_NAME }}~1 # Fallback, a more robust solution might use get_latest_release

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Your build script creates a ZIP named BPSR-PSO-win32-x64.zip in the 'dist' directory
          files: dist/BPSR-PSO-win32-x64.zip
          name: Release ${{ steps.get_tag.outputs.TAG_NAME }}
          tag_name: ${{ steps.get_tag.outputs.TAG_NAME }}
          body: ${{ steps.release_notes.outputs.changelog }}
          draft: false
          prerelease: false