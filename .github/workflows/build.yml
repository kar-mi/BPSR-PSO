name: Build and Release

on:
    push:
        tags:
            - 'v*' # Triggers on version tags like v1.0.0, v2.0.1, etc.

jobs:
  build:
    # Your build script targets win32, so we must use a Windows runner.
    runs-on: windows-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your required Node.js version
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Run Build Script
        run: npm run build

      - name: 🏷️ Get Tag Name
        id: get_tag
        # Extracts the tag name (e.g., v1.0.0)
        run: echo "TAG_NAME=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        shell: powershell

      - name: Get version from package.json
        id: package-version
        shell: pwsh
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT

      - name: Find ZIP file
        id: find-zip
        shell: pwsh
        run: |
          $zipFile = Get-ChildItem -Path "dist/*.zip" | Select-Object -First 1
          echo "ZIP_PATH=$($zipFile.FullName)" >> $env:GITHUB_OUTPUT
          echo "ZIP_NAME=$($zipFile.Name)" >> $env:GITHUB_OUTPUT

      - name: Build Changelog
        id: build_changelog # <--- THIS ID IS CRITICAL
        uses: mikepenz/release-changelog-builder-action@v5 # Ensure you use a recent version
        with:
            # 1. Use COMMIT mode since you are committing directly to master
            mode: "COMMIT"
            # 2. Define the range for the changelog (from the previous tag to the current tag)
            # This setting is necessary for the action to compare the new tag against the last one.
            fromTag: ${{ github.ref_name }}~1 
            toTag: ${{ github.ref_name }}
        env:
            # 3. Requires a token to access Git history and tags
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Release Body
        id: prepare_body
        # Explicitly use PowerShell (pwsh) to use the here-string syntax
        shell: pwsh 
        run: |
            # Use a PowerShell Here-String (@" ... "@) to define the multi-line variable
            $HEADER = @"
            ## BPSR PSO ${{ github.ref_name }}

            ### Installation
            1. Download the ZIP file below
            2. Extract to any folder
            3. Run `BPSR PSO.exe`

            ### Requirements
            - Windows 10/11 (x64)
            - Npcap driver (will prompt for installation if not found)
            - https://npcap.com/#download

            ### Changes
            "@

            # Get the changelog output from the previous step
            # Note: Accessing step outputs in PowerShell requires a different format
            $CHANGELOG = "${{ steps.build_changelog.outputs.changelog }}"
            
            # Combine the header and the changelog
            $FULL_BODY = "$HEADER`n`n$CHANGELOG"

            # Write the combined content to a file
            $FULL_BODY | Out-File -FilePath RELEASE_BODY.md -Encoding UTF8

            # Set the file path as an output for the next step
            # Note: Use $env:GITHUB_OUTPUT to set outputs in PowerShell
            echo "release_body_file=RELEASE_BODY.md" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: BPSR PSO ${{ github.ref_name }}
          body: |
            ## BPSR PSO ${{ github.ref_name }}

            ### Installation
            1. Download the ZIP file below
            2. Extract to any folder
            3. Run `BPSR PSO.exe`

            ### Requirements
            - Windows 10/11 (x64)
            - Npcap driver (will prompt for installation if not found)

            ### Changes
            See the commit history for details.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find-zip.outputs.ZIP_PATH }}
          asset_name: ${{ steps.find-zip.outputs.ZIP_NAME }}
          asset_content_type: application/zip